import pandas as pd
import numpy as np

# Define the number of movies and users
num_movies = 10
num_users = 10

# Create a DataFrame with random values between 0 and 5
data = np.random.uniform(0, 5, size=(num_movies, num_users))

# Create column names for users (e.g., User1, User2, ...)
user_columns = [f'User{i+1}' for i in range(num_users)]

# Create a DataFrame with movie names as rows and user ratings as columns
movie_names = [f'Movie{i+1}' for i in range(num_movies)]
df = pd.DataFrame(data, columns=user_columns, index=movie_names)

# Round the values to two decimal places
df = df.round(2)

# Display the DataFrame
print(df)


from sklearn.neighbors import NearestNeighbors
knn = NearestNeighbors(metric='cosine', algorithm='brute')
knn.fit(df.values)
distances, indices = knn.kneighbors(df.values, n_neighbors=3)

print(distances)
print(indices)

# get the index for 'movie_0'
index_for_movie = df.index.tolist().index('Movie1')
# find the indices for the similar movies
sim_movies = indices[index_for_movie].tolist()
# distances between 'movie_0' and the similar movies
movie_distances = distances[index_for_movie].tolist()
# the position of 'movie_0' in the list sim_movies
id_movie = sim_movies.index(index_for_movie)
# remove 'movie_0' from the list sim_movies
sim_movies.remove(index_for_movie)
# remove 'movie_0' from the list movie_distances
movie_distances.pop(id_movie)
print('The Nearest Movies to movie_0:', sim_movies)
print('The Distance from movie_0:', movie_distances)



"""
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.neighbors import NearestNeighbors
a = [
    [2, 3, 4, 4, 5, 2, 3, 3, 5, 3],
    [3, 3, 5, 4, 3, 4, 5, 2, 4, 4],
    [5, 5, 1, 5, 1, 5, 3, 4, 1, 0],
    [0, 2, 0, 1, 2, 1, 1, 0, 2, 4],
    [1, 1, 2, 0, 3, 0, 5, 1, 4, 1],
    [4, 4, 3, 3, 0, 1, 5, 3, 3, 2],
    [0, 0, 5, 4, 3, 3, 1, 5, 4, 3],
    [2, 2, 3, 5, 4, 5, 3, 2, 1, 4],
    [3, 3, 1, 3, 5, 4, 2, 5, 2, 0],
    [5, 4, 2, 0, 2, 5, 2, 0, 3, 3]
]
user_item_matrix = np.array(a)
user_similarity = cosine_similarity(user_item_matrix)
target_user = 3
model_knn = NearestNeighbors(metric='cosine', n_neighbors=4)
model_knn.fit(user_item_matrix)
target_user_data = user_item_matrix[target_user].reshape(1, -1)
distances, indices = model_knn.kneighbors(target_user_data, n_neighbors=4)
similar_users = indices[0][1:]
top_3_similar_users = similar_users[:3]
print("Top 3 similar users to user", target_user, "are:",
      top_3_similar_users)

missing_mask = user_item_matrix[target_user] == 0
predicted_ratings = np.zeros_like(user_item_matrix[target_user])
for item in range(user_item_matrix.shape[1]):
    if missing_mask[item]:
        weighted_sum = 0
        total_similarity = 0
        for sim_user in similar_users:
            similarity = user_similarity[target_user][sim_user]
            rating = user_item_matrix[sim_user][item]
            weighted_sum += similarity * rating
            total_similarity += abs(similarity)
        if total_similarity > 0:
            predicted_ratings[item] = weighted_sum / total_similarity

print("Predicted ratings for user", target_user, ":")
for item, predicted_rating in enumerate(predicted_ratings):
    print(f"Item {item}: {predicted_rating}")

N=3
missing_item_ratings = [(item, predicted_rating) for item, predicted_rating
                        in enumerate(predicted_ratings)
                        if user_item_matrix[target_user][item] == 0]
missing_item_ratings.sort(key=lambda x: x[1], reverse=True)
top_n_recommendations = missing_item_ratings[:N]
print(f"Top {N} recommended items for user {target_user}:")
for item, predicted_rating in top_n_recommendations:
    print(f"Item {item}: Predicted Rating = {predicted_rating}")
"""
